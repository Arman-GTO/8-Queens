using System;
using System.Collections.Generic;
using System.Text;

namespace _8_Queens
{
	internal class Program
	{
		static void DrawBoard(List<string> positions, int total)
		{
			int thisRowQueenPosition;
			int posNum;
			int column;

			Console.ForegroundColor = ConsoleColor.Blue;
			Console.WriteLine($"\n Total number of possible positions: {total}\n\n");

			for (posNum = 0; posNum < positions.Count;)
			{
				Console.SetCursorPosition(0, 4);

				for (int row = 1; row <= 8; row++)
				{
					Console.ResetColor();
					Console.Write("   ");

					thisRowQueenPosition = positions[posNum].IndexOf($"{row}") + 1;

					for (column = 1; column <= thisRowQueenPosition - 1; column++)
					{
						Console.BackgroundColor = (column % 2 == row % 2) ? ConsoleColor.Gray : ConsoleColor.DarkGray;
						Console.Write("   ");
					}

					Console.BackgroundColor = (column % 2 == row % 2) ? ConsoleColor.Gray : ConsoleColor.DarkGray;
					Console.ForegroundColor = ConsoleColor.Black;
					Console.Write($" â™  ");

					for (column = thisRowQueenPosition + 1; column <= 8; column++)
					{
						Console.BackgroundColor = (column % 2 == row % 2) ? ConsoleColor.Gray : ConsoleColor.DarkGray;
						Console.Write("   ");
					}

					Console.Write("\n");
				}

				Console.ResetColor();
				Console.ForegroundColor = ConsoleColor.Cyan;
				if (posNum != 0) Console.Write("\n\n   <"); else Console.Write("\n\n    ");
				Console.Write($"  position number ");
				Console.ForegroundColor = ConsoleColor.Green;
				Console.Write($"{posNum + 1}   ");
				if (posNum != positions.Count - 1) Console.Write(">"); else Console.Write(" ");
				Console.ResetColor();
				Console.Write("\n     R: Reset, esc: Exit\n ");

				Console.SetCursorPosition(0, 16);

				var key = Console.ReadKey();

				if (key.Key == ConsoleKey.Escape)
					return;

				else if (key.Key == ConsoleKey.R)
				{
					posNum = 0;
					continue;
				}

				else if (key.Key == ConsoleKey.RightArrow && posNum != positions.Count - 1)
				{
					posNum++;
					continue;
				}

				else if (key.Key == ConsoleKey.LeftArrow && posNum != 0)
				{
					posNum--;
					continue;
				}
			}
		}

		static int[] Successor(string perm)
		{
			int order = perm.Length;

			if (IsLast(perm) == true)
				return null;

			int[] result = new int[order];
			for (int k = 0; k < order; ++k)
				result[k] = perm[k];

			int left, right;

			left = order - 2;  // find left value 
			while ((result[left] > result[left + 1]) && (left >= 1))
				--left;

			right = order - 1;  // first value gt left
			while (result[left] > result[right])
				--right;

			int tmp = result[left];  // swap [left] and [right]
			result[left] = result[right];
			result[right] = tmp;

			int i = left + 1;  // order the tail
			int j = order - 1;
			while (i < j)
			{
				tmp = result[i];
				result[i++] = result[j];
				result[j--] = tmp;
			}

			return result;
		}

		static bool IsLast(string perm)
		{
			for (int i = 0; i < perm.Length - 1; i++)
				if (perm[i] < perm[i + 1])
					return false;
			return true;
		}

		static void Main()
		{
			Console.OutputEncoding = Encoding.Unicode;

			int[] column = new int[9]; column[0] = 10;
			bool isValid = true;
			bool key = true;
			List<string> finalPositions = new List<string>();
			string nums = "12345678";
			int total = 0;
			int n = 1;

			foreach (char p1 in nums)
			{
				column[n] = p1;

				nums = nums.Remove(nums.IndexOf(p1), 1);
				n++;
				foreach (char p2 in nums)
				{
					column[n] = p2;
					if (!key)
					{
						key = true;
						break;
					}
					for (int m = 1; m < n; m++)
						if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
						{
							isValid = false;
							break;
						}
					if (!isValid)
					{
						if (column[n] == 8)
						{
							key = false;
							n--;
							break;
						}
						isValid = true;
						continue;
					}

					nums = nums.Remove(nums.IndexOf(p2), 1);
					n++;
					foreach (char p3 in nums)
					{
						column[n] = p3;
						if (!key)
						{
							key = true;
							break;
						}
						for (int m = 1; m < n; m++)
							if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
							{
								isValid = false;
								break;
							}
						if (!isValid)
						{
							if (column[n] == 8)
							{
								key = false;
								n--;
								break;
							}
							isValid = true;
							continue;
						}

						nums = nums.Remove(nums.IndexOf(p3), 1);
						n++;
						foreach (char p4 in nums)
						{
							column[n] = p4;
							if (!key)
							{
								key = true;
								break;
							}
							for (int m = 1; m < n; m++)
								if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
								{
									isValid = false;
									break;
								}
							if (!isValid)
							{
								if (column[n] == 8)
								{
									key = false;
									n--;
									break;
								}
								isValid = true;
								continue;
							}

							nums = nums.Remove(nums.IndexOf(p4), 1);
							n++;
							foreach (char p5 in nums)
							{
								column[n] = p5;
								if (!key)
								{
									key = true;
									break;
								}
								for (int m = 1; m < n; m++)
									if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
									{
										isValid = false;
										break;
									}
								if (!isValid)
								{
									if (column[n] == 8)
									{
										key = false;
										n--;
										break;
									}
									isValid = true;
									continue;
								}

								nums = nums.Remove(nums.IndexOf(p5), 1);
								n++;
								foreach (char p6 in nums)
								{
									column[n] = p6;
									if (!key)
									{
										key = true;
										break;
									}
									for (int m = 1; m < n; m++)
										if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
										{
											isValid = false;
											break;
										}
									if (!isValid)
									{
										if (column[n] == 8)
										{
											key = false;
											n--;
											break;
										}
										isValid = true;
										continue;
									}

									nums = nums.Remove(nums.IndexOf(p6), 1);
									n++;
									foreach (char p7 in nums)
									{
										column[n] = p7;
										if (!key)
										{
											key = true;
											break;
										}
										for (int m = 1; m < n; m++)
											if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
											{
												isValid = false;
												break;
											}
										if (!isValid)
										{
											if (column[n] == 8)
											{
												key = false;
												n--;
												break;
											}
											isValid = true;
											continue;
										}

										nums = nums.Remove(nums.IndexOf(p7), 1);
										n++;
										foreach (char p8 in nums)
										{
											column[n] = p8;
											for (int m = 1; m < n; m++)
												if (column[n] - column[m] == n - m || column[n] - column[m] == m - n)
												{
													isValid = false;
													break;
												}
											if (!isValid)
											{
												if (column[n] == 8)
												{
													key = false;
													n--;
													break;
												}
												isValid = true;
												continue;
											}

											for (int i = 1; i <= 8; i++)
												finalPositions[total] += column[i].ToString();

											total++;
										}
									}
								}
							}
						}
					}
				}
			}

			DrawBoard(finalPositions, total);
			return;
		}
	}
}
